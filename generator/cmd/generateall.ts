import * as constants from '../constants';
import { cloneAndGenerateBasePaths, validateAndReturnReadmePath } from '../specs';
import { generateSchemas, clearAutogeneratedSchemaRefs, saveAutogeneratedSchemaRefs } from '../generate';
import { whitelist } from '../whitelist';
import chalk from 'chalk';
import { flatten, chunk } from 'lodash';
import { executeSynchronous, chunker } from '../utils';

interface GenerateAllParams {
    batchCount?: number,
    batchIndex?: number,
}

function parseParams(): GenerateAllParams {
    if (!process.argv[2]) {
        return {};
    }

    return JSON.parse(process.argv[2]);
}

executeSynchronous(async () => {
    const params = parseParams();

    let filteredWhitelist = whitelist;
    if (params.batchCount !== undefined && params.batchIndex !== undefined) {
        filteredWhitelist = chunker(filteredWhitelist, params.batchCount)[params.batchIndex];
    }

    await cloneAndGenerateBasePaths(constants.specsRepoPath, constants.specsRepoUri, constants.specsRepoCommitHash);

    await clearAutogeneratedSchemaRefs(filteredWhitelist);

    const schemaRefs: string[] = [];
    const errors = [];
    for (const whitelistConfig of filteredWhitelist) {
        try {
            const readme = await validateAndReturnReadmePath(whitelistConfig.basePath);

            const newRefs = await generateSchemas(readme, whitelistConfig);
            schemaRefs.push(...newRefs);
        } catch(error) {
            console.log(chalk.red(`Caught exception processing whitelist entry ${whitelistConfig.basePath}.`));
            console.log(chalk.red(error));
    
            errors.push(error);
        }
    }

    await saveAutogeneratedSchemaRefs(flatten(schemaRefs));

    if (errors.length > 0) {
        throw new Error(`Autogeneration failed with ${errors.length} errors. See logs for detailed information.`);
    }
});