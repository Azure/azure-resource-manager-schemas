import * as constants from '../constants';
import { cloneAndGenerateBasePaths, resolveLocalPath, validateAndReturnReadmePath } from '../specs';
import { SchemaConfiguration, generateSchemas, clearAutogeneratedSchemaRefs, saveAutogeneratedSchemaRefs } from '../generate';
import { getAutogenlist } from '../autogenlist';
import chalk from 'chalk';
import { flatten } from 'lodash';
import { executeSynchronous, chunker } from '../utils';

interface GenerateAllParams {
    batchCount?: number,
    batchIndex?: number,
    localPath?: string,
    readmeFiles?: string[],
}

function parseParams(): GenerateAllParams {
    if (!process.argv[2]) {
        return {};
    }

    return JSON.parse(process.argv[2]);
}

executeSynchronous(async () => {
    const params = parseParams();

    let filteredAutogenlist = getAutogenlist();
    if (params.batchCount !== undefined && params.batchIndex !== undefined) {
        filteredAutogenlist = chunker(filteredAutogenlist, params.batchCount)[params.batchIndex];
    }

    let localPath = params.localPath;
    if (!localPath) {
        localPath = constants.specsRepoPath;
        await cloneAndGenerateBasePaths(localPath, constants.specsRepoUri, constants.specsRepoCommitHash);
    } else {
        localPath = await resolveLocalPath(localPath);
    }

    if (!!params.readmeFiles) {
        filteredAutogenlist = filteredAutogenlist.filter(c =>
            !!(params.readmeFiles?.find(f => f.startsWith('specification/' + c.basePath)))
        );
    }

    await clearAutogeneratedSchemaRefs(filteredAutogenlist);

    const schemaConfigs: SchemaConfiguration[] = [];
    const errors = [];
    for (const autogenlistConfig of filteredAutogenlist) {
        try {
            const readme = await validateAndReturnReadmePath(localPath, autogenlistConfig.basePath);

            const newConfigs = await generateSchemas(readme, autogenlistConfig);
            schemaConfigs.push(...newConfigs);
        } catch(error) {
            console.log(chalk.red(`Caught exception processing autogenlist entry ${autogenlistConfig.basePath}.`));
            console.log(chalk.red(error));
    
            errors.push(error);
        }
    }

    await saveAutogeneratedSchemaRefs(flatten(schemaConfigs));

    if (errors.length > 0) {
        throw new Error(`Autogeneration failed with ${errors.length} errors. See logs for detailed information.`);
    }
});