import * as constants from '../constants';
import { cloneAndGenerateBasePaths, resolveAbsolutePath, validateAndReturnReadmePath } from '../specs';
import { generateSchemas, saveAutoGeneratedSchemaRefs, getApiVersionsByNamespace } from '../generate';
import process from 'process';
import { findOrGenerateAutogenEntries } from '../autogenlist';
import chalk from 'chalk';
import { keys } from 'lodash';
import { executeSynchronous } from '../utils';

executeSynchronous(async () => {
    const basePath = process.argv[2];
    let localPath = process.argv[3];
    if (!localPath) {
        localPath = constants.specsRepoPath;
        await cloneAndGenerateBasePaths(localPath, constants.specsRepoUri, constants.specsRepoCommitHash);
    } else {
        localPath = await resolveAbsolutePath(localPath);
    }

    let readme = '';
    try {
        readme = await validateAndReturnReadmePath(localPath, basePath);
    } catch {
        throw new Error(`Unable to find a readme under '${basePath}'. Please try running 'npm run list-basepaths' to find the list of valid paths.`);
    }

    const schemaConfigs = [];
    const namespaces = keys(await getApiVersionsByNamespace(readme));
    const autoGenEntries = findOrGenerateAutogenEntries(basePath, namespaces);

    for (const autoGenConfig of autoGenEntries) {
        if (autoGenConfig.disabledForAutogen === true) {
            console.log(`Path ${autoGenConfig.basePath} has been disabled for generation:`)
            console.log(chalk.red(JSON.stringify(autoGenConfig, null, 2)));
            continue;
        }

        console.log(`Using autogenlist config:`)
        console.log(chalk.green(JSON.stringify(autoGenConfig, null, 2)));

        const localSchemaConfigs = await generateSchemas(readme, autoGenConfig);
        schemaConfigs.push(...localSchemaConfigs);
    }

    await saveAutoGeneratedSchemaRefs(schemaConfigs);
});