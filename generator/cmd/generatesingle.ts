import * as constants from '../constants';
import { cloneAndGenerateBasePaths, validateAndReturnReadmePath } from '../specs';
import { generateSchemas, saveAutogeneratedSchemaRefs } from '../generate';
import process from 'process';
import { findAutogenEntries } from '../autogenlist';
import chalk from 'chalk';
import { executeSynchronous } from '../utils';

executeSynchronous(async () => {
    const basePath = process.argv[2];
    await cloneAndGenerateBasePaths(constants.specsRepoPath, constants.specsRepoUri, constants.specsRepoCommitHash);

    let readme = '';
    try {
        readme = await validateAndReturnReadmePath(basePath);
    } catch {
        throw new Error(`Unable to find a readme under '${basePath}'. Please try running 'npm run list-basepaths' to find the list of valid paths.`);
    }

    const schemaConfigs = [];
    const autogenEntries = findAutogenEntries(basePath);

    if (autogenEntries.length === 0) {
        const localSchemaConfigs = await generateSchemas(readme);
        schemaConfigs.push(...localSchemaConfigs);
    } else {
        for (const autogenlistConfig of autogenEntries) {
            console.log(`Using autogenlist config:`)
            console.log(chalk.green(JSON.stringify(autogenlistConfig, null, 2)));

            const localSchemaConfigs = await generateSchemas(readme, autogenlistConfig);
            schemaConfigs.push(...localSchemaConfigs);
        }
    }

    await saveAutogeneratedSchemaRefs(schemaConfigs);
});