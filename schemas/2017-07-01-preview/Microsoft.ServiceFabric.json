{
  "id": "https://schema.management.azure.com/schemas/2017-07-01-preview/Microsoft.ServiceFabric.json#",
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "Microsoft.ServiceFabric",
  "description": "Microsoft ServiceFabric Resource Types",
  "resourceDefinitions": {
    "clusters": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "type": "string",
          "enum": [
            "2017-07-01-preview"
          ]
        },
        "location": {
          "type": "string",
          "description": "Resource location."
        },
        "name": {
          "type": "string",
          "description": "The name of the cluster resource"
        },
        "properties": {
          "oneOf": [
            {
              "$ref": "#/definitions/ClusterProperties"
            },
            {
              "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression"
            }
          ],
          "description": "Describes the cluster resource properties."
        },
        "tags": {
          "oneOf": [
            {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "properties": {}
            },
            {
              "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression"
            }
          ],
          "description": "Resource tags."
        },
        "type": {
          "type": "string",
          "enum": [
            "Microsoft.ServiceFabric/clusters"
          ]
        }
      },
      "required": [
        "apiVersion",
        "location",
        "name",
        "properties",
        "type"
      ],
      "description": "Microsoft.ServiceFabric/clusters"
    }
  },
  "definitions": {
    "AzureActiveDirectory": {
      "type": "object",
      "properties": {
        "clientApplication": {
          "type": "string",
          "description": "Azure active directory client application id."
        },
        "clusterApplication": {
          "type": "string",
          "description": "Azure active directory cluster application id."
        },
        "tenantId": {
          "type": "string",
          "description": "Azure active directory tenant id."
        }
      },
      "description": "The settings to enable AAD authentication on the cluster."
    },
    "CertificateDescription": {
      "type": "object",
      "properties": {
        "thumbprint": {
          "type": "string",
          "description": "Thumbprint of the primary certificate."
        },
        "thumbprintSecondary": {
          "type": "string",
          "description": "Thumbprint of the secondary certificate."
        },
        "x509StoreName": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "AddressBook",
                "AuthRoot",
                "CertificateAuthority",
                "Disallowed",
                "My",
                "Root",
                "TrustedPeople",
                "TrustedPublisher"
              ]
            },
            {
              "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression"
            }
          ],
          "description": "The local certificate store location."
        }
      },
      "required": [
        "thumbprint"
      ],
      "description": "Describes the certificate details."
    },
    "ClientCertificateCommonName": {
      "type": "object",
      "properties": {
        "certificateCommonName": {
          "type": "string",
          "description": "The common name of the client certificate."
        },
        "certificateIssuerThumbprint": {
          "type": "string",
          "description": "The issuer thumbprint of the client certificate."
        },
        "isAdmin": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression"
            }
          ],
          "description": "Indicates if the client certificate has admin access to the cluster. Non admin clients can perform only read only operations on the cluster."
        }
      },
      "required": [
        "certificateCommonName",
        "certificateIssuerThumbprint",
        "isAdmin"
      ],
      "description": "Describes the client certificate details using common name."
    },
    "ClientCertificateThumbprint": {
      "type": "object",
      "properties": {
        "certificateThumbprint": {
          "type": "string",
          "description": "The thumbprint of the client certificate."
        },
        "isAdmin": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression"
            }
          ],
          "description": "Indicates if the client certificate has admin access to the cluster. Non admin clients can perform only read only operations on the cluster."
        }
      },
      "required": [
        "certificateThumbprint",
        "isAdmin"
      ],
      "description": "Describes the client certificate details using thumbprint."
    },
    "ClusterHealthPolicy": {
      "type": "object",
      "properties": {
        "maxPercentUnhealthyApplications": {
          "oneOf": [
            {
              "type": "integer",
              "minimum": 0,
              "maximum": 100
            },
            {
              "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression"
            }
          ],
          "description": "The maximum allowed percentage of unhealthy applications before reporting an error. For example, to allow 10% of applications to be unhealthy, this value would be 10. "
        },
        "maxPercentUnhealthyNodes": {
          "oneOf": [
            {
              "type": "integer",
              "minimum": 0,
              "maximum": 100
            },
            {
              "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression"
            }
          ],
          "description": "The maximum allowed percentage of unhealthy nodes before reporting an error. For example, to allow 10% of nodes to be unhealthy, this value would be 10. "
        }
      },
      "description": "Defines a health policy used to evaluate the health of the cluster or of a cluster node."
    },
    "ClusterProperties": {
      "type": "object",
      "properties": {
        "addOnFeatures": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "RepairManager",
                  "DnsService",
                  "BackupRestoreService"
                ]
              }
            },
            {
              "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression"
            }
          ],
          "description": "The list of add-on features to enable in the cluster."
        },
        "availableClusterVersions": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ClusterVersionDetails"
              }
            },
            {
              "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression"
            }
          ],
          "description": "The Service Fabric runtime versions available for this cluster."
        },
        "azureActiveDirectory": {
          "oneOf": [
            {
              "$ref": "#/definitions/AzureActiveDirectory"
            },
            {
              "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression"
            }
          ],
          "description": "The settings to enable AAD authentication on the cluster."
        },
        "certificate": {
          "oneOf": [
            {
              "$ref": "#/definitions/CertificateDescription"
            },
            {
              "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression"
            }
          ],
          "description": "Describes the certificate details."
        },
        "clientCertificateCommonNames": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ClientCertificateCommonName"
              }
            },
            {
              "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression"
            }
          ],
          "description": "The list of client certificates referenced by common name that are allowed to manage the cluster."
        },
        "clientCertificateThumbprints": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ClientCertificateThumbprint"
              }
            },
            {
              "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression"
            }
          ],
          "description": "The list of client certificates referenced by thumbprint that are allowed to manage the cluster."
        },
        "clusterCodeVersion": {
          "type": "string",
          "description": "The Service Fabric runtime version of the cluster. This property can only by set the user when **upgradeMode** is set to 'Manual'. To get list of available Service Fabric versions for new clusters use [ClusterVersion API](./ClusterVersion.md). To get the list of available version for existing clusters use **availableClusterVersions**."
        },
        "clusterState": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "WaitingForNodes",
                "Deploying",
                "BaselineUpgrade",
                "UpdatingUserConfiguration",
                "UpdatingUserCertificate",
                "UpdatingInfrastructure",
                "EnforcingClusterVersion",
                "UpgradeServiceUnreachable",
                "AutoScale",
                "Ready"
              ]
            },
            {
              "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression"
            }
          ]
        },
        "diagnosticsStorageAccountConfig": {
          "oneOf": [
            {
              "$ref": "#/definitions/DiagnosticsStorageAccountConfig"
            },
            {
              "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression"
            }
          ],
          "description": "The storage account information for storing Service Fabric diagnostic logs."
        },
        "fabricSettings": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SettingsSectionDescription"
              }
            },
            {
              "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression"
            }
          ],
          "description": "The list of custom fabric settings to configure the cluster."
        },
        "managementEndpoint": {
          "type": "string",
          "description": "The http management endpoint of the cluster."
        },
        "nodeTypes": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NodeTypeDescription"
              }
            },
            {
              "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression"
            }
          ],
          "description": "The list of node types in the cluster."
        },
        "reliabilityLevel": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "None",
                "Bronze",
                "Silver",
                "Gold",
                "Platinum"
              ]
            },
            {
              "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression"
            }
          ]
        },
        "reverseProxyCertificate": {
          "oneOf": [
            {
              "$ref": "#/definitions/CertificateDescription"
            },
            {
              "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression"
            }
          ],
          "description": "Describes the certificate details."
        },
        "upgradeDescription": {
          "oneOf": [
            {
              "$ref": "#/definitions/ClusterUpgradePolicy"
            },
            {
              "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression"
            }
          ],
          "description": "Describes the policy used when upgrading the cluster."
        },
        "upgradeMode": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "Automatic",
                "Manual"
              ]
            },
            {
              "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression"
            }
          ]
        },
        "vmImage": {
          "type": "string",
          "description": "The VM image VMSS has been configured with. Generic names such as Windows or Linux can be used."
        }
      },
      "required": [
        "managementEndpoint",
        "nodeTypes"
      ],
      "description": "Describes the cluster resource properties."
    },
    "ClusterUpgradeDeltaHealthPolicy": {
      "type": "object",
      "properties": {
        "maxPercentDeltaUnhealthyApplications": {
          "oneOf": [
            {
              "type": "integer",
              "minimum": 0,
              "maximum": 100
            },
            {
              "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression"
            }
          ],
          "description": "The maximum allowed percentage of applications health degradation allowed during cluster upgrades. The delta is measured between the state of the applications at the beginning of upgrade and the state of the applications at the time of the health evaluation. The check is performed after every upgrade domain upgrade completion to make sure the global state of the cluster is within tolerated limits. System services are not included in this."
        },
        "maxPercentDeltaUnhealthyNodes": {
          "oneOf": [
            {
              "type": "integer",
              "minimum": 0,
              "maximum": 100
            },
            {
              "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression"
            }
          ],
          "description": "The maximum allowed percentage of nodes health degradation allowed during cluster upgrades. The delta is measured between the state of the nodes at the beginning of upgrade and the state of the nodes at the time of the health evaluation. The check is performed after every upgrade domain upgrade completion to make sure the global state of the cluster is within tolerated limits."
        },
        "maxPercentUpgradeDomainDeltaUnhealthyNodes": {
          "oneOf": [
            {
              "type": "integer",
              "minimum": 0,
              "maximum": 100
            },
            {
              "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression"
            }
          ],
          "description": "The maximum allowed percentage of upgrade domain nodes health degradation allowed during cluster upgrades. The delta is measured between the state of the upgrade domain nodes at the beginning of upgrade and the state of the upgrade domain nodes at the time of the health evaluation. The check is performed after every upgrade domain upgrade completion for all completed upgrade domains to make sure the state of the upgrade domains is within tolerated limits. "
        }
      },
      "required": [
        "maxPercentDeltaUnhealthyApplications",
        "maxPercentDeltaUnhealthyNodes",
        "maxPercentUpgradeDomainDeltaUnhealthyNodes"
      ],
      "description": "Describes the delta health policies for the cluster upgrade."
    },
    "ClusterUpgradePolicy": {
      "type": "object",
      "properties": {
        "deltaHealthPolicy": {
          "oneOf": [
            {
              "$ref": "#/definitions/ClusterUpgradeDeltaHealthPolicy"
            },
            {
              "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression"
            }
          ],
          "description": "Describes the delta health policies for the cluster upgrade."
        },
        "forceRestart": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression"
            }
          ],
          "description": "If true, then processes are forcefully restarted during upgrade even when the code version has not changed (the upgrade only changes configuration or data)."
        },
        "healthCheckRetryTimeout": {
          "type": "string",
          "description": "The amount of time to retry health evaluation when the application or cluster is unhealthy before the upgrade rolls back. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format."
        },
        "healthCheckStableDuration": {
          "type": "string",
          "description": "The amount of time that the application or cluster must remain healthy before the upgrade proceeds to the next upgrade domain. The duration can be in either hh:mm:ss or in d.hh:mm:ss.ms format."
        },
        "healthCheckWaitDuration": {
          "type": "string",
          "description": "The length of time to wait after completing an upgrade domain before performing health checks. The duration can be in either hh:mm:ss or in d.hh:mm:ss.ms format."
        },
        "healthPolicy": {
          "oneOf": [
            {
              "$ref": "#/definitions/ClusterHealthPolicy"
            },
            {
              "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression"
            }
          ],
          "description": "Defines a health policy used to evaluate the health of the cluster or of a cluster node."
        },
        "upgradeDomainTimeout": {
          "type": "string",
          "description": "The amount of time each upgrade domain has to complete before the upgrade rolls back. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format."
        },
        "upgradeReplicaSetCheckTimeout": {
          "type": "string",
          "description": "The maximum amount of time to block processing of an upgrade domain and prevent loss of availability when there are unexpected issues. When this timeout expires, processing of the upgrade domain will proceed regardless of availability loss issues. The timeout is reset at the start of each upgrade domain. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format."
        },
        "upgradeTimeout": {
          "type": "string",
          "description": "The amount of time the overall upgrade has to complete before the upgrade rolls back. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format."
        }
      },
      "required": [
        "healthCheckRetryTimeout",
        "healthCheckStableDuration",
        "healthCheckWaitDuration",
        "healthPolicy",
        "upgradeDomainTimeout",
        "upgradeReplicaSetCheckTimeout",
        "upgradeTimeout"
      ],
      "description": "Describes the policy used when upgrading the cluster."
    },
    "ClusterVersionDetails": {
      "type": "object",
      "properties": {
        "codeVersion": {
          "type": "string",
          "description": "The Service Fabric runtime version of the cluster."
        },
        "environment": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "Windows",
                "Linux"
              ]
            },
            {
              "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression"
            }
          ],
          "description": "Indicates if this version is for Windows or Linux operating system."
        },
        "supportExpiryUtc": {
          "type": "string",
          "description": "The date of expiry of support of the version."
        }
      },
      "description": "The detail of the Service Fabric runtime version result"
    },
    "DiagnosticsStorageAccountConfig": {
      "type": "object",
      "properties": {
        "blobEndpoint": {
          "type": "string",
          "description": "The blob endpoint of the azure storage account."
        },
        "protectedAccountKeyName": {
          "type": "string",
          "description": "The protected diagnostics storage key name."
        },
        "queueEndpoint": {
          "type": "string",
          "description": "The queue endpoint of the azure storage account."
        },
        "storageAccountName": {
          "type": "string",
          "description": "The Azure storage account name."
        },
        "tableEndpoint": {
          "type": "string",
          "description": "The table endpoint of the azure storage account."
        }
      },
      "required": [
        "blobEndpoint",
        "protectedAccountKeyName",
        "queueEndpoint",
        "storageAccountName",
        "tableEndpoint"
      ],
      "description": "The storage account information for storing Service Fabric diagnostic logs."
    },
    "EndpointRangeDescription": {
      "type": "object",
      "properties": {
        "endPort": {
          "oneOf": [
            {
              "type": "integer"
            },
            {
              "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression"
            }
          ],
          "description": "End port of a range of ports"
        },
        "startPort": {
          "oneOf": [
            {
              "type": "integer"
            },
            {
              "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression"
            }
          ],
          "description": "Starting port of a range of ports"
        }
      },
      "required": [
        "endPort",
        "startPort"
      ],
      "description": "Port range details"
    },
    "NodeTypeDescription": {
      "type": "object",
      "properties": {
        "applicationPorts": {
          "oneOf": [
            {
              "$ref": "#/definitions/EndpointRangeDescription"
            },
            {
              "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression"
            }
          ],
          "description": "Port range details"
        },
        "capacities": {
          "oneOf": [
            {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "properties": {}
            },
            {
              "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression"
            }
          ],
          "description": "The capacity tags applied to the nodes in the node type, the cluster resource manager uses these tags to understand how much resource a node has."
        },
        "clientConnectionEndpointPort": {
          "oneOf": [
            {
              "type": "integer"
            },
            {
              "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression"
            }
          ],
          "description": "The TCP cluster management endpoint port."
        },
        "durabilityLevel": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "Bronze",
                "Silver",
                "Gold"
              ]
            },
            {
              "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression"
            }
          ]
        },
        "ephemeralPorts": {
          "oneOf": [
            {
              "$ref": "#/definitions/EndpointRangeDescription"
            },
            {
              "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression"
            }
          ],
          "description": "Port range details"
        },
        "httpGatewayEndpointPort": {
          "oneOf": [
            {
              "type": "integer"
            },
            {
              "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression"
            }
          ],
          "description": "The HTTP cluster management endpoint port."
        },
        "isPrimary": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression"
            }
          ],
          "description": "The node type on which system services will run. Only one node type should be marked as primary. Primary node type cannot be deleted or changed for existing clusters."
        },
        "name": {
          "type": "string",
          "description": "The name of the node type."
        },
        "placementProperties": {
          "oneOf": [
            {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "properties": {}
            },
            {
              "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression"
            }
          ],
          "description": "The placement tags applied to nodes in the node type, which can be used to indicate where certain services (workload) should run."
        },
        "reverseProxyEndpointPort": {
          "oneOf": [
            {
              "type": "integer"
            },
            {
              "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression"
            }
          ],
          "description": "The endpoint used by reverse proxy."
        },
        "vmInstanceCount": {
          "oneOf": [
            {
              "type": "integer",
              "minimum": 1,
              "maximum": 2147483647
            },
            {
              "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression"
            }
          ],
          "description": "The number of nodes in the node type. This count should match the capacity property in the corresponding VirtualMachineScaleSet resource."
        }
      },
      "required": [
        "clientConnectionEndpointPort",
        "httpGatewayEndpointPort",
        "isPrimary",
        "name",
        "vmInstanceCount"
      ],
      "description": "Describes a node type in the cluster, each node type represents sub set of nodes in the cluster."
    },
    "SettingsParameterDescription": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The parameter name of fabric setting."
        },
        "value": {
          "type": "string",
          "description": "The parameter value of fabric setting."
        }
      },
      "required": [
        "name",
        "value"
      ],
      "description": "Describes a parameter in fabric settings of the cluster."
    },
    "SettingsSectionDescription": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The section name of the fabric settings."
        },
        "parameters": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SettingsParameterDescription"
              }
            },
            {
              "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression"
            }
          ],
          "description": "The collection of parameters in the section."
        }
      },
      "required": [
        "name",
        "parameters"
      ],
      "description": "Describes a section in the fabric settings of the cluster."
    }
  }
}