{
  "tests": [

    {
      "name": "resourceMetaSchema - Non-object type",
      "definition": "./ResourceMetaSchema.json#/definitions/resourceMetaSchema",
      "expectedErrors": [
        {
          "message": "Invalid type: string (expected object)",
          "dataPath": "/"
        }
      ],
      "json": "hello"
    },

    {
      "name": "resourceMetaSchema - Empty object",
      "definition": "./ResourceMetaSchema.json#/definitions/resourceMetaSchema",
      "expectedErrors": [
        {
          "message": "Missing required property: $schema",
          "dataPath": "/"
        },
        {
          "message": "Missing required property: title",
          "dataPath": "/"
        },
        {
          "message": "Missing required property: description",
          "dataPath": "/"
        },
        {
          "message": "Missing required property: resourceDefinitions",
          "dataPath": "/"
        }
      ],
      "json": { }
    },
    
    {
      "name": "resourceMetaSchema - Empty description",
      "definition": "./ResourceMetaSchema.json#/definitions/resourceMetaSchema",
      "expectedErrors": [
        {
          "message": "String is too short (0 chars), minimum 1",
          "dataPath": "/description",
          "schemaPath": "/properties/description/minLength"
        },
        {
          "message": "Too few properties defined (0), minimum 1",
          "dataPath": "/resourceDefinitions"
        },
        {
          "message": "Too few properties defined (0), minimum 1",
          "dataPath": "/definitions"
        }
      ],
      "json": {
        "$schema": "http://json-schema.org/draft-04/schema",
        "title": "Test Title",
        "description": "",
        "resourceDefinitions": { },
        "definitions": { }
      }
    },

    {
      "name": "resourceMetaSchema - Empty definitions",
      "definition": "./ResourceMetaSchema.json#/definitions/resourceMetaSchema",
      "expectedErrors": [
        {
          "message": "Too few properties defined (0), minimum 1",
          "dataPath": "/resourceDefinitions"
        },
        {
          "message": "Too few properties defined (0), minimum 1",
          "dataPath": "/definitions"
        }
      ],
      "json": {
        "$schema": "http://json-schema.org/draft-04/schema",
        "title": "Test Title",
        "description": "hello",
        "resourceDefinitions": { },
        "definitions": { }
      }
    },

    {
      "name": "resourceMetaSchema - Extra property",
      "definition": "./ResourceMetaSchema.json#/definitions/resourceMetaSchema",
      "expectedErrors": [
        {
          "message": "Additional properties not allowed",
          "dataPath": "/extraProperty"
        }
      ],
      "json": {
        "$schema": "http://json-schema.org/draft-04/schema#",
        "title": "Test Title",
        "description": "hello",
        "resourceDefinitions": {
          "mockResource": {
            "description": "Mock Resource Description"
          }
        },
        "extraProperty": "Shouldn't be here"
      }
    },

    {
      "name": "resourceMetaSchema - Empty resource definition",
      "definition": "./ResourceMetaSchema.json#/definitions/resourceMetaSchema",
      "expectedErrors": [
        {
          "message": "Missing required property: description",
          "dataPath": "/resourceDefinitions/mockResource"
        }
      ],
      "json": {
        "$schema": "http://json-schema.org/draft-04/schema",
        "title": "Test Title",
        "description": "hello",
        "resourceDefinitions": {
          "mockResource": { }
        }
      }
    },


    {
      "name": "resource - Empty JSON",
      "definition": "./ResourceMetaSchema.json#/definitions/resource",
      "expectedErrors": [
        {
          "message": "Missing required property: description",
          "dataPath": "/"
        }
      ],
      "json": {
      }
    },

    {
      "name": "resource - Missing properties",
      "definition": "./ResourceMetaSchema.json#/definitions/resource",
      "json": {
        "description": "Test Resource Description"
      }
    },

    {
      "name": "resource - Missing apiVersion",
      "definition": "./ResourceMetaSchema.json#/definitions/resource",
      "expectedErrors": [
        {
          "message": "Missing required property: apiVersion",
          "dataPath": "/properties"
        }
      ],
      "json": {
        "description": "Test Resource Description",
        "properties": {
          "type": { "enum": [ "Microsoft.Dan/TestType" ] }
        }
      }
    },

    {
      "name": "resource - Missing type",
      "definition": "./ResourceMetaSchema.json#/definitions/resource",
      "expectedErrors": [
        {
          "message": "Missing required property: type",
          "dataPath": "/properties"
        }
      ],
      "json": {
        "description": "Test Resource Description",
        "properties": {
          "apiVersion": { "enum": [ "2015-12-02" ] }
        }
      }
    },

    {
      "name": "resource - Minimal valid",
      "definition": "./ResourceMetaSchema.json#/definitions/resource",
      "json": {
        "description": "Test Resource Description",
        "properties": {
          "apiVersion": { "enum": [ "2015-12-02" ] },
          "type": { "enum": [ "Microsoft.Dan/TestResourceType" ] }
        }
      }
    },

    {
      "name": "resource - Empty child resources",
      "definition": "./ResourceMetaSchema.json#/definitions/resource",
      "json": {
        "description": "Test Resource Description",
        "properties": {
          "apiVersion": { "enum": [ "2015-12-02" ] },
          "type": { "enum": [ "Microsoft.Dan/TestResourceType" ] },
          "resources": { }
        }
      }
    },

    {
      "name": "resource - Empty resource properties",
      "definition": "./ResourceMetaSchema.json#/definitions/resource",
      "json": {
        "description": "Test Resource Description",
        "properties": {
          "apiVersion": { "enum": [ "2015-12-02" ] },
          "type": { "enum": [ "Microsoft.Dan/TestResourceType" ] },
          "properties": { }
        }
      }
    },

    {
      "name": "resource - Resource properties with string-valued property",
      "definition": "./ResourceMetaSchema.json#/definitions/resource",
      "expectedErrors": [
        {
          "message": "Additional properties not allowed",
          "dataPath": "/properties/properties/testPropertyName",
          "schemaPath": "/properties/properties/properties/properties/additionalProperties"
        }
      ],
      "json": {
        "description": "Test Resource Description",
        "properties": {
          "apiVersion": { "enum": [ "2015-12-02" ] },
          "type": { "enum": [ "Microsoft.Dan/TestResourceType" ] },
          "properties": {
            "testPropertyName": "TestName"
          }
        }
      }
    },

    {
      "name": "resource - Resource properties with empty object-valued property",
      "definition": "./ResourceMetaSchema.json#/definitions/resource",
      "expectedErrors": [
        {
          "message": "Additional properties not allowed",
          "dataPath": "/properties/properties/testPropertyName"
        }
      ],
      "json": {
        "description": "Test Resource Description",
        "properties": {
          "apiVersion": { "enum": [ "2015-12-02" ] },
          "type": { "enum": [ "Microsoft.Dan/TestResourceType" ] },
          "properties": {
            "testPropertyName": { }
          }
        }
      }
    },


    {
      "name": "resourceTypeProperty - Empty JSON",
      "definition": "./ResourceMetaSchema.json#/definitions/resourceTypeProperty",
      "expectedErrors": [
        {
          "message": "Missing required property: enum",
          "dataPath": "/"
        }
      ],
      "json": {
      }
    },

    {
      "name": "resourceTypeProperty - Empty enum array",
      "definition": "./ResourceMetaSchema.json#/definitions/resourceTypeProperty",
      "expectedErrors": [
        {
          "message": "Array is too short (0), minimum 1",
          "dataPath": "/enum"
        }
      ],
      "json": {
        "enum": [ ]
      }
    },

    {
      "name": "resourceTypeProperty - Enum array with non-string value",
      "definition": "./ResourceMetaSchema.json#/definitions/resourceTypeProperty",
      "expectedErrors": [
        {
          "message": "Invalid type: number (expected string)",
          "dataPath": "/enum/0"
        }
      ],
      "json": {
        "enum": [ 42 ]
      }
    },

    {
      "name": "resourceTypeProperty - Enum array with empty string value",
      "definition": "./ResourceMetaSchema.json#/definitions/resourceTypeProperty",
      "expectedErrors": [
        {
          "message": "String is too short (0 chars), minimum 1",
          "dataPath": "/enum/0"
        }
      ],
      "json": {
        "enum": [ "" ]
      }
    },

    {
      "name": "resourceTypeProperty - Single enum value",
      "definition": "./ResourceMetaSchema.json#/definitions/resourceTypeProperty",
      "json": {
        "enum": [ "Microsoft.Dan/TestResourceType" ]
      }
    },

    {
      "name": "resourceTypeProperty - Multiple enum values",
      "definition": "./ResourceMetaSchema.json#/definitions/resourceTypeProperty",
      "json": {
        "enum": [
          "Microsoft.Dan/TestResourceType1",
          "Microsoft.Dan/TestResourceType2",
          "Microsoft.Dan/TestResourceType3"
        ]
      }
    },

    {
      "name": "resourceTypeProperty - Additional property other than enum",
      "definition": "./ResourceMetaSchema.json#/definitions/resourceTypeProperty",
      "expectedErrors": [
        {
          "message": "Additional properties not allowed",
          "dataPath": "/shouldPass"
        }
      ],
      "json": {
        "enum": [ "Microsoft.Dan/TestResourceType" ],
        "shouldPass": false
      }
    },


    {
      "name": "resourceProperties - Non-object",
      "definition": "./ResourceMetaSchema.json#/definitions/resourceTypeProperty",
      "expectedErrors": [
        {
          "message": "Invalid type: number (expected object)",
          "dataPath": "/"
        }
      ],
      "json": 42
    },

    {
      "name": "resourceProperties - Empty JSON object",
      "definition": "./ResourceMetaSchema.json#/definitions/resourceProperties",
      "json": {
      }
    },

    {
      "name": "resourceProperties - Declared type is string",
      "definition": "./ResourceMetaSchema.json#/definitions/resourceProperties",
      "expectedErrors": [
        {
          "message": "No enum match for: \"string\"",
          "dataPath": "/type"
        }
      ],
      "json": {
        "type": "string"
      }
    },

    {
      "name": "resourceProperties - Declared type is object with no properties",
      "definition": "./ResourceMetaSchema.json#/definitions/resourceProperties",
      "json": {
        "type": "object"
      }
    },

    {
      "name": "resourceProperties - Unrecognized property",
      "definition": "./ResourceMetaSchema.json#/definitions/resourceProperties",
      "expectedErrors": [
        {
          "message": "Additional properties not allowed",
          "dataPath": "/testPropertyName"
        }
      ],
      "json": {
        "testPropertyName": 50
      }
    },

    {
      "name": "resourceProperties - Integer value properties",
      "definition": "./ResourceMetaSchema.json#/definitions/resourceProperties",
      "expectedErrors": [
        {
          "message": "Invalid type: number (expected object)",
          "dataPath": "/properties"
        }
      ],
      "json": {
        "type": "object",
        "properties": 39
      }
    },

    {
      "name": "resourceProperties - Empty properties object",
      "definition": "./ResourceMetaSchema.json#/definitions/resourceProperties",
      "json": {
        "type": "object",
        "properties": { }
      }
    },

    {
      "name": "resourceProperties - One valid property",
      "definition": "./ResourceMetaSchema.json#/definitions/resourceProperties",
      "json": {
        "type": "object",
        "properties": {
          "testResourceProperty": {
            "description": "Microsoft.DataConnect/connectionManagers: The description of the connectionManager."
          }
        }
      }
    },

    {
      "name": "resourceProperties - Multiple valid properties",
      "definition": "./ResourceMetaSchema.json#/definitions/resourceProperties",
      "json": {
        "type": "object",
        "properties": {
          "testResourceProperty1": {
            "description": "Description1"
          },
          "testResourceProperty2": {
            "description": "Description2"
          }
        }
      }
    },

    {
      "name": "resourceProperty - Non-object",
      "definition": "./ResourceMetaSchema.json#/definitions/resourceProperty",
      "expectedErrors": [
        {
          "message": "Invalid type: string (expected object)",
          "dataPath": "/"
        }
      ],
      "json": "non-object value"
    },

    {
      "name": "resourceProperty - Without description",
      "definition": "./ResourceMetaSchema.json#/definitions/resourceProperty",
      "expectedErrors": [
        {
          "message": "Missing required property: description",
          "dataPath": "/"
        }
      ],
      "json": {
        "oneOf": [
          { "type": "integer" },
          { "$ref": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#/definitions/expression" }
        ]
      }
    },

    {
      "name": "resourceProperty - String type",
      "definition": "./ResourceMetaSchema.json#/definitions/resourceProperty",
      "json": {
        "type": "string",
        "description": "Test description that describes this property."
      }
    },

    {
      "name": "resourceProperty - Number type without expression option",
      "definition": "./ResourceMetaSchema.json#/definitions/resourceProperty",
      "expectedErrors": [
        {
          "message": "No enum match for: \"number\"",
          "dataPath": "/type"
        }
      ],
      "json": {
        "type": "number",
        "description": "Test description that describes this property."
      }
    },


    {
      "name": "resourcePropertyDefinitionOptions - Non-array type",
      "definition": "./ResourceMetaSchema.json#/definitions/resourcePropertyDefinitionOptions",
      "expectedErrors": [
        {
          "message": "Invalid type: number (expected array)",
          "dataPath": "/"
        }
      ],
      "json": 7
    },

    {
      "name": "resourcePropertyDefinitionOptions - Empty array",
      "definition": "./ResourceMetaSchema.json#/definitions/resourcePropertyDefinitionOptions",
      "expectedErrors": [
        {
          "message": "Array is too short (0), minimum 2",
          "dataPath": "/"
        }
      ],
      "json": [ ]
    },

    {
      "name": "resourcePropertyDefinitionOptions - Array with two string values",
      "definition": "./ResourceMetaSchema.json#/definitions/resourcePropertyDefinitionOptions",
      "expectedErrors": [
        {
          "message": "Invalid type: string (expected object)",
          "dataPath": "/0"
        },
        {
          "message": "Invalid type: string (expected object)",
          "dataPath": "/1"
        }
      ],
      "json": [
        "hello",
        "there"
      ]
    },

    {
      "name": "resourcePropertyDefinitionOptions - Expression reference and boolean type",
      "definition": "./ResourceMetaSchema.json#/definitions/resourcePropertyDefinitionOptions",
      "json": [
        { "$ref": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#/definitions/expression" },
        { "type": "boolean" }
      ]
    },

    {
      "name": "resourcePropertyDefinitionOptions - Two expression references",
      "definition": "./ResourceMetaSchema.json#/definitions/resourcePropertyDefinitionOptions",
      "expectedErrors": [
        {
          "message": "Array items are not unique (indices 0 and 1)",
          "dataPath": "/"
        }
      ],
      "json": [
        { "$ref": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#/definitions/expression" },
        { "$ref": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#/definitions/expression" }
      ]
    },

    {
      "name": "resourcePropertyDefinitionOptions - Expression reference and string type",
      "definition": "./ResourceMetaSchema.json#/definitions/resourcePropertyDefinitionOptions",
      "expectedErrors": [
        {
          "message": "Data does not match any schemas from \"oneOf\"",
          "dataPath": "/1"
        }
      ],
      "json": [
        { "$ref": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#/definitions/expression" },
        { "type": "string" }
      ]
    },

    {
      "name": "resourcePropertyDefinitionOptions - Expression reference and string type with pattern",
      "definition": "./ResourceMetaSchema.json#/definitions/resourcePropertyDefinitionOptions",
      "json": [
        { "$ref": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#/definitions/expression" },
        {
          "type": "string",
          "pattern": "Regular Expression Pattern"
        }
      ]
    },

    {
      "name": "resourcePropertyDefinitionOptions - Expression reference and number type",
      "definition": "./ResourceMetaSchema.json#/definitions/resourcePropertyDefinitionOptions",
      "expectedErrors": [
        {
          "message": "Data does not match any schemas from \"oneOf\"",
          "dataPath": "/1"
        }
      ],
      "json": [
        { "$ref": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#/definitions/expression" },
        { "type": "number" }
      ]
    },




    {
      "name": "description - Non-string type",
      "definition": "./ResourceMetaSchema.json#/definitions/description",
      "expectedErrors": [
        {
          "message": "Invalid type: number (expected string)",
          "dataPath": "/"
        }
      ],
      "json": 33
    },

    {
      "name": "description - Non-empty string",
      "definition": "./ResourceMetaSchema.json#/definitions/description",
      "json": "I'm a description"
    },


    {
      "name": "stringArrayEmptyOkay - Non-array type",
      "definition": "./ResourceMetaSchema.json#/definitions/stringArrayEmptyOkay",
      "expectedErrors": [
        {
          "message": "Data does not match any schemas from \"anyOf\"",
          "dataPath": "/"
        }
      ],
      "json": 99
    },

    {
      "name": "stringArrayEmptyOkay - Empty array",
      "definition": "./ResourceMetaSchema.json#/definitions/stringArrayEmptyOkay",
      "json": [ ]
    },

    {
      "name": "stringArrayEmptyOkay - Non-empty array",
      "definition": "./ResourceMetaSchema.json#/definitions/stringArrayEmptyOkay",
      "json": [ "a", "b", "c" ]
    },


    {
      "name": "apiVersionProperty - Non-object",
      "definition": "./ResourceMetaSchema.json#/definitions/apiVersionProperty",
      "expectedErrors": [
        {
          "message": "Invalid type: number (expected object)",
          "dataPath": "/"
        }
      ],
      "json": 20
    },

    {
      "name": "apiVersionProperty - Empty object",
      "definition": "./ResourceMetaSchema.json#/definitions/apiVersionProperty",
      "json": {
      }
    },

    {
      "name": "apiVersionProperty - Properties other than 'enum'",
      "definition": "./ResourceMetaSchema.json#/definitions/apiVersionProperty",
      "expectedErrors": [
        {
          "message": "Additional properties not allowed",
          "dataPath": "/otherProperty"
        }
      ],
      "json": {
        "otherProperty": "otherValue"
      }
    },

    {
      "name": "apiVersionProperty - Empty enum array",
      "definition": "./ResourceMetaSchema.json#/definitions/apiVersionProperty",
      "expectedErrors": [
        {
          "message": "Array is too short (0), minimum 1",
          "dataPath": "/enum"
        }
      ],
      "json": {
        "enum": [ ]
      }
    },

    {
      "name": "apiVersionProperty - Value doesn't match API version pattern",
      "definition": "./ResourceMetaSchema.json#/definitions/apiVersionProperty",
      "expectedErrors": [
        {
          "message": "String does not match pattern: (^((\\d\\d\\d\\d-\\d\\d-\\d\\d)|([0-9]+(\\.[0-9]+)?))(-[a-zA-Z][a-zA-Z0-9]*)?$)",
          "dataPath": "/enum/0",
          "schemaPath": "/properties/enum/items/pattern"
        }
      ],
      "json": {
        "enum": [ "spam" ]
      }
    },

    {
      "name": "apiVersionProperty - Date api version",
      "definition": "./ResourceMetaSchema.json#/definitions/apiVersionProperty",
      "json": {
        "enum": [ "2015-01-01" ]
      }
    },

    {
      "name": "apiVersionProperty - Duplicated date api version",
      "definition": "./ResourceMetaSchema.json#/definitions/apiVersionProperty",
      "expectedErrors": [
        {
          "message": "Array items are not unique (indices 0 and 1)",
          "dataPath": "/enum"
        }
      ],
      "json": {
        "enum": [ "2015-01-01", "2015-01-01" ]
      }
    }

  ]
}