{
  "tests": [

    {
      "name": "resourceMetaSchema - Non-object type",
      "definition": "./schemas/ResourceMetaSchema.json#/definitions/resourceMetaSchema",
      "expectedErrors": [
        {
          "message": "Invalid type: string (expected object)",
          "dataPath": "/"
        }
      ],
      "json": "hello"
    },

    {
      "name": "resourceMetaSchema - Empty object",
      "definition": "./schemas/ResourceMetaSchema.json#/definitions/resourceMetaSchema",
      "expectedErrors": [
        {
          "message": "Missing required property: $schema",
          "dataPath": "/"
        },
        {
          "message": "Missing required property: title",
          "dataPath": "/"
        },
        {
          "message": "Missing required property: description",
          "dataPath": "/"
        },
        {
          "message": "Missing required property: resourceDefinitions",
          "dataPath": "/"
        }
      ],
      "json": { }
    },
    
    {
      "name": "resourceMetaSchema - Empty description",
      "definition": "./schemas/ResourceMetaSchema.json#/definitions/resourceMetaSchema",
      "expectedErrors": [
        {
          "message": "String is too short (0 chars), minimum 1",
          "dataPath": "/description"
        }
      ],
      "json": {
        "$schema": "http://json-schema.org/draft-04/schema",
        "title": "Test Title",
        "description": "",
        "resourceDefinitions": { },
        "definitions": { }
      }
    },

    {
      "name": "resourceMetaSchema - Empty definitions",
      "definition": "./schemas/ResourceMetaSchema.json#/definitions/resourceMetaSchema",
      "expectedErrors": [
      ],
      "json": {
        "$schema": "http://json-schema.org/draft-04/schema",
        "title": "Test Title",
        "description": "hello",
        "resourceDefinitions": { },
        "definitions": { }
      }
    },

    {
      "name": "resourceMetaSchema - Extra property",
      "definition": "./schemas/ResourceMetaSchema.json#/definitions/resourceMetaSchema",
      "expectedErrors": [
        {
          "message": "Additional properties not allowed",
          "dataPath": "/extraProperty"
        }
      ],
      "json": {
        "$schema": "http://json-schema.org/draft-04/schema#",
        "title": "Test Title",
        "description": "hello",
        "resourceDefinitions": {
          "mockResource": {
            "description": "Mock Resource Description"
          }
        },
        "extraProperty": "Shouldn't be here"
      }
    },

    {
      "name": "resourceMetaSchema - Empty resource definition",
      "definition": "./schemas/ResourceMetaSchema.json#/definitions/resourceMetaSchema",
      "expectedErrors": [
        {
          "message": "Missing required property: description",
          "dataPath": "/resourceDefinitions/mockResource"
        }
      ],
      "json": {
        "$schema": "http://json-schema.org/draft-04/schema",
        "title": "Test Title",
        "description": "hello",
        "resourceDefinitions": {
          "mockResource": { }
        }
      }
    },


    {
      "name": "resourceMetaSchema/properties/id - Non-string value",
      "definition": "./schemas/ResourceMetaSchema.json#/definitions/resourceMetaSchema/properties/id",
      "expectedErrors": [
        {
          "message": "Invalid type: number (expected string)",
          "dataPath": "/"
        }
      ],
      "json": 32
    },

    {
      "name": "resourceMetaSchema/properties/id - Empty string",
      "definition": "./schemas/ResourceMetaSchema.json#/definitions/resourceMetaSchema/properties/id",
      "expectedErrors": [
        {
          "message": "String is too short (0 chars), minimum 1",
          "dataPath": "/"
        }
      ],
      "json": ""
    },

    {
      "name": "resourceMetaSchema/properties/id - Non-empty string",
      "definition": "./schemas/ResourceMetaSchema.json#/definitions/resourceMetaSchema/properties/id",
      "json": "Hello there!"
    },


    {
      "name": "resourceMetaSchema/properties/$schema - Non-string value",
      "definition": "./schemas/ResourceMetaSchema.json#/definitions/resourceMetaSchema/properties/$schema",
      "expectedErrors": [
        {
          "message": "Invalid type: boolean (expected string)",
          "dataPath": "/"
        }
      ],
      "json": false
    },

    {
      "name": "resourceMetaSchema/properties/$schema - Empty string",
      "definition": "./schemas/ResourceMetaSchema.json#/definitions/resourceMetaSchema/properties/$schema",
      "expectedErrors": [
        {
          "message": "String is too short (0 chars), minimum 1",
          "dataPath": "/"
        }
      ],
      "json": ""
    },

    {
      "name": "resourceMetaSchema/properties/$schema - Non-uri string with spaces",
      "definition": "./schemas/ResourceMetaSchema.json#/definitions/resourceMetaSchema/properties/$schema",
      "json": "hello there"
    },

    {
      "name": "resourceMetaSchema/properties/$schema - Local file path string",
      "definition": "./schemas/ResourceMetaSchema.json#/definitions/resourceMetaSchema/properties/$schema",
      "json": "./schemas/ResourceMetaSchema.json#/definitions/resourceMetaSchema/properties/$schema"
    },

    {
      "name": "resourceMetaSchema/properties/$schema - Uri string",
      "definition": "./schemas/ResourceMetaSchema.json#/definitions/resourceMetaSchema/properties/$schema",
      "json": "http://json-schema.org/draft-04/schema#"
    },


    {
      "name": "resourceMetaSchema/properties/title - Non-string value",
      "definition": "./schemas/ResourceMetaSchema.json#/definitions/resourceMetaSchema/properties/title",
      "expectedErrors": [
        {
          "message": "Invalid type: boolean (expected string)",
          "dataPath": "/"
        }
      ],
      "json": false
    },

    {
      "name": "resourceMetaSchema/properties/title - Empty string",
      "definition": "./schemas/ResourceMetaSchema.json#/definitions/resourceMetaSchema/properties/title",
      "expectedErrors": [
        {
          "message": "String is too short (0 chars), minimum 1",
          "dataPath": "/"
        }
      ],
      "json": ""
    },

    {
      "name": "resourceMetaSchema/properties/title - Non-empty string",
      "definition": "./schemas/ResourceMetaSchema.json#/definitions/resourceMetaSchema/properties/title",
      "json": "hello"
    },


    {
      "name": "resourceMetaSchema/properties/resourceDefinitions - Non-object value",
      "definition": "./schemas/ResourceMetaSchema.json#/definitions/resourceMetaSchema/properties/resourceDefinitions",
      "expectedErrors": [
        {
          "message": "Invalid type: boolean (expected object)",
          "dataPath": "/"
        }
      ],
      "json": true
    },

    {
      "name": "resourceMetaSchema/properties/resourceDefinitions - Empty object",
      "definition": "./schemas/ResourceMetaSchema.json#/definitions/resourceMetaSchema/properties/resourceDefinitions",
      "expectedErrors": [
      ],
      "json": { }
    },

    {
      "name": "resourceMetaSchema/properties/resourceDefinitions - One resource",
      "definition": "./schemas/ResourceMetaSchema.json#/definitions/resourceMetaSchema/properties/resourceDefinitions",
      "json": {
        "testResource": {
          "description": "Test description"
        }
      }
    },


    {
      "name": "resource - Non-object value",
      "definition": "./schemas/ResourceMetaSchema.json#/definitions/resource",
      "expectedErrors": [
        {
          "message": "Invalid type: string (expected object)",
          "dataPath": "/"
        }
      ],
      "json": "resource"
    },

    {
      "name": "resource - Empty JSON",
      "definition": "./schemas/ResourceMetaSchema.json#/definitions/resource",
      "expectedErrors": [
        {
          "message": "Missing required property: description",
          "dataPath": "/"
        }
      ],
      "json": {
      }
    },

    {
      "name": "resource - Just description",
      "definition": "./schemas/ResourceMetaSchema.json#/definitions/resource",
      "json": {
        "description": "Test Resource Description"
      }
    },


    {
      "name": "resource/properties/type - Not 'object'",
      "definition": "./schemas/ResourceMetaSchema.json#/definitions/resource/properties/type",
      "expectedErrors": [
        {
          "message": "No enum match for: \"number\"",
          "dataPath": "/"
        }
      ],
      "json": "number"
    },

    {
      "name": "resource/properties/type - 'object'",
      "definition": "./schemas/ResourceMetaSchema.json#/definitions/resource/properties/type",
      "json": "object"
    },


    {
      "name": "description - Non-string type",
      "definition": "./schemas/ResourceMetaSchema.json#/definitions/description",
      "expectedErrors": [
        {
          "message": "Invalid type: number (expected string)",
          "dataPath": "/"
        }
      ],
      "json": 33
    },

    {
      "name": "description - Non-empty string",
      "definition": "./schemas/ResourceMetaSchema.json#/definitions/description",
      "json": "I'm a description"
    },


    {
      "name": "stringArrayEmptyOkay - Non-array type",
      "definition": "./schemas/ResourceMetaSchema.json#/definitions/stringArrayEmptyOkay",
      "expectedErrors": [
        {
          "message": "Data does not match any schemas from \"oneOf\"",
          "dataPath": "/"
        }
      ],
      "json": 99
    },

    {
      "name": "stringArrayEmptyOkay - Empty array",
      "definition": "./schemas/ResourceMetaSchema.json#/definitions/stringArrayEmptyOkay",
      "json": [ ]
    },

    {
      "name": "stringArrayEmptyOkay - Non-empty array",
      "definition": "./schemas/ResourceMetaSchema.json#/definitions/stringArrayEmptyOkay",
      "json": [ "a", "b", "c" ]
    },


    {
      "name": "resource/properties/properties - Non-object value",
      "definition": "./schemas/ResourceMetaSchema.json#/definitions/resource/properties/properties",
      "expectedErrors": [
        {
          "message": "Invalid type: boolean (expected object)",
          "dataPath": "/"
        }
      ],
      "json": false
    },

    {
      "name": "resource/properties/properties - Empty object",
      "definition": "./schemas/ResourceMetaSchema.json#/definitions/resource/properties/properties",
      "expectedErrors": [
        {
          "message": "Missing required property: apiVersion",
          "dataPath": "/"
        },
        {
          "message": "Missing required property: type",
          "dataPath": "/"
        }
      ],
      "json": { }
    },

    {
      "name": "resource/properties/properties - apiVersion and type, no resources or properties",
      "definition": "./schemas/ResourceMetaSchema.json#/definitions/resource/properties/properties",
      "json": {
        "apiVersion": {
          "enum": [ "2015-01-01" ]
        },
        "type": {
          "enum": [ "Test Resource Type" ]
        }
      }
    },

    {
      "name": "resource/properties/properties - apiVersion and type, empty resources, no properties",
      "definition": "./schemas/ResourceMetaSchema.json#/definitions/resource/properties/properties",
      "json": {
        "apiVersion": {
          "enum": [ "2015-01-01" ]
        },
        "type": {
          "enum": [ "Test Resource Type" ]
        },
        "resources": { }
      }
    },

    {
      "name": "resource/properties/properties - apiVersion and type, empty properties, no resources",
      "definition": "./schemas/ResourceMetaSchema.json#/definitions/resource/properties/properties",
      "json": {
        "apiVersion": {
          "enum": [ "2015-01-01" ]
        },
        "type": {
          "enum": [ "Test Resource Type" ]
        },
        "properties": { }
      }
    },


    {
      "name": "resourceTypesArray - Empty JSON",
      "definition": "./schemas/ResourceMetaSchema.json#/definitions/resourceTypesArray",
      "expectedErrors": [
        {
          "message": "Missing required property: enum",
          "dataPath": "/"
        }
      ],
      "json": {
      }
    },

    {
      "name": "resourceTypesArray - Empty enum array",
      "definition": "./schemas/ResourceMetaSchema.json#/definitions/resourceTypesArray",
      "expectedErrors": [
        {
          "message": "Array is too short (0), minimum 1",
          "dataPath": "/enum"
        }
      ],
      "json": {
        "enum": [ ]
      }
    },

    {
      "name": "resourceTypesArray - Enum array with non-string value",
      "definition": "./schemas/ResourceMetaSchema.json#/definitions/resourceTypesArray",
      "expectedErrors": [
        {
          "message": "Invalid type: number (expected string)",
          "dataPath": "/enum/0"
        }
      ],
      "json": {
        "enum": [ 42 ]
      }
    },

    {
      "name": "resourceTypesArray - Enum array with empty string value",
      "definition": "./schemas/ResourceMetaSchema.json#/definitions/resourceTypesArray",
      "expectedErrors": [
        {
          "message": "String is too short (0 chars), minimum 1",
          "dataPath": "/enum/0"
        }
      ],
      "json": {
        "enum": [ "" ]
      }
    },

    {
      "name": "resourceTypesArray - Single enum value",
      "definition": "./schemas/ResourceMetaSchema.json#/definitions/resourceTypesArray",
      "json": {
        "enum": [ "Microsoft.Dan/TestResourceType" ]
      }
    },

    {
      "name": "resourceTypesArray - Multiple enum values",
      "definition": "./schemas/ResourceMetaSchema.json#/definitions/resourceTypesArray",
      "json": {
        "enum": [
          "Microsoft.Dan/TestResourceType1",
          "Microsoft.Dan/TestResourceType2",
          "Microsoft.Dan/TestResourceType3"
        ]
      }
    },

    {
      "name": "resourceTypesArray - Additional property other than enum",
      "definition": "./schemas/ResourceMetaSchema.json#/definitions/resourceTypesArray",
      "expectedErrors": [
        {
          "message": "Additional properties not allowed",
          "dataPath": "/shouldPass"
        }
      ],
      "json": {
        "enum": [ "Microsoft.Dan/TestResourceType" ],
        "shouldPass": false
      }
    },


    {
      "name": "resourceApiVersions - Non-object",
      "definition": "./schemas/ResourceMetaSchema.json#/definitions/resourceApiVersions",
      "expectedErrors": [
        {
          "message": "Data does not match any schemas from \"oneOf\"",
          "dataPath": "/"
        }
      ],
      "json": 20
    },

    {
      "name": "resourceApiVersions - Empty object",
      "definition": "./schemas/ResourceMetaSchema.json#/definitions/resourceApiVersions",
      "expectedErrors": [
        {
          "message": "Data does not match any schemas from \"oneOf\"",
          "dataPath": "/"
        }
      ],
      "json": { }
    },

    {
      "name": "resourceApiVersions - Properties other than 'enum' or '$ref'",
      "definition": "./schemas/ResourceMetaSchema.json#/definitions/resourceApiVersions",
      "expectedErrors": [
        {
          "message": "Data does not match any schemas from \"oneOf\"",
          "dataPath": "/"
        }
      ],
      "json": {
        "otherProperty": "otherValue"
      }
    },

    {
      "name": "resourceApiVersions - Empty enum array",
      "definition": "./schemas/ResourceMetaSchema.json#/definitions/resourceApiVersions",
      "expectedErrors": [
        {
          "message": "Data does not match any schemas from \"oneOf\"",
          "dataPath": "/"
        }
      ],
      "json": {
        "enum": [ ]
      }
    },

    {
      "name": "resourceApiVersions - Value doesn't match API version pattern",
      "definition": "./schemas/ResourceMetaSchema.json#/definitions/resourceApiVersions",
      "expectedErrors": [
        {
          "message": "Data does not match any schemas from \"oneOf\"",
          "dataPath": "/"
        }
      ],
      "json": {
        "enum": [ "spam" ]
      }
    },

    {
      "name": "resourceApiVersions - Date api version",
      "definition": "./schemas/ResourceMetaSchema.json#/definitions/resourceApiVersions",
      "json": {
        "enum": [ "2015-01-01" ]
      }
    },

    {
      "name": "resourceApiVersions - Duplicated date api version",
      "definition": "./schemas/ResourceMetaSchema.json#/definitions/resourceApiVersions",
      "expectedErrors": [
        {
          "message": "Data does not match any schemas from \"oneOf\"",
          "dataPath": "/"
        }
      ],
      "json": {
        "enum": [ "2015-01-01", "2015-01-01" ]
      }
    },

    {
      "name": "resourceApiVersions - $ref to common api version array",
      "definition": "./schemas/ResourceMetaSchema.json#/definitions/resourceApiVersions",
      "json": { "$ref": "#/tests" }
    },

    {
      "name": "resourceApiVersions - enum and $ref properties",
      "definition": "./schemas/ResourceMetaSchema.json#/definitions/resourceApiVersions",
      "expectedErrors": [
        {
          "message": "Data does not match any schemas from \"oneOf\"",
          "dataPath": "/"
        }
      ],
      "json": {
        "enum": [ "2015-01-01" ],
        "$ref": "#/tests"
      }
    },


    {
      "name": "childResources - Non-object value",
      "definition": "./schemas/ResourceMetaSchema.json#/definitions/childResources",
      "expectedErrors": [
        {
          "message": "Invalid type: number (expected object)",
          "dataPath": "/"
        }
      ],
      "json": 98
    },

    {
      "name": "childResources - Empty object",
      "definition": "./schemas/ResourceMetaSchema.json#/definitions/childResources",
      "json": { }
    },


    {
      "name": "resourceSpecificProperties - Non-object value",
      "definition": "./schemas/ResourceMetaSchema.json#/definitions/resourceSpecificProperties",
      "expectedErrors": [
        {
          "message": "Data does not match any schemas from \"oneOf\"",
          "dataPath": "/"
        }
      ],
      "json": false
    },

    {
      "name": "resourceSpecificProperties - Empty object",
      "definition": "./schemas/ResourceMetaSchema.json#/definitions/resourceSpecificProperties",
      "json": { }
    },

    {
      "name": "resourceSpecificProperties - Property other than $ref or properties",
      "definition": "./schemas/ResourceMetaSchema.json#/definitions/resourceSpecificProperties",
      "expectedErrors": [
        {
          "message": "Data does not match any schemas from \"oneOf\"",
          "dataPath": "/"
        }
      ],
      "json": {
        "otherProperty": "Test Other Property Value"
      }
    },

    {
      "name": "resourceSpecificProperties - Declared type is not object",
      "definition": "./schemas/ResourceMetaSchema.json#/definitions/resourceSpecificProperties",
      "expectedErrors": [
        {
          "message": "Data does not match any schemas from \"oneOf\"",
          "dataPath": "/"
        }
      ],
      "json": {
        "type": "string"
      }
    },

    {
      "name": "resourceSpecificProperties - $ref property",
      "definition": "./schemas/ResourceMetaSchema.json#/definitions/resourceSpecificProperties",
      "json": {
        "$ref": "#/tests"
      }
    },

    {
      "name": "resourceSpecificProperties - Empty properties property",
      "definition": "./schemas/ResourceMetaSchema.json#/definitions/resourceSpecificProperties",
      "json": {
        "properties": { }
      }
    },

    {
      "name": "resourceSpecificProperties - properties with both $ref and properties",
      "definition": "./schemas/ResourceMetaSchema.json#/definitions/resourceSpecificProperties",
      "expectedErrors": [
        {
          "message": "Data does not match any schemas from \"oneOf\"",
          "dataPath": "/",
          "schemaPath": "/oneOf"
        }
      ],
      "json": {
        "$ref": "#/tests",
        "properties": { }
      }
    },










    {
      "name": "resource - Missing apiVersion",
      "definition": "./schemas/ResourceMetaSchema.json#/definitions/resource",
      "expectedErrors": [
        {
          "message": "Missing required property: apiVersion",
          "dataPath": "/properties"
        }
      ],
      "json": {
        "description": "Test Resource Description",
        "properties": {
          "type": { "enum": [ "Microsoft.Dan/TestType" ] }
        }
      }
    },

    {
      "name": "resource - Missing type",
      "definition": "./schemas/ResourceMetaSchema.json#/definitions/resource",
      "expectedErrors": [
        {
          "message": "Missing required property: type",
          "dataPath": "/properties"
        }
      ],
      "json": {
        "description": "Test Resource Description",
        "properties": {
          "apiVersion": { "enum": [ "2015-12-02" ] }
        }
      }
    },

    {
      "name": "resource - Minimal valid",
      "definition": "./schemas/ResourceMetaSchema.json#/definitions/resource",
      "json": {
        "description": "Test Resource Description",
        "properties": {
          "apiVersion": { "enum": [ "2015-12-02" ] },
          "type": { "enum": [ "Microsoft.Dan/TestResourceType" ] }
        }
      }
    },

    {
      "name": "resource - Empty child resources",
      "definition": "./schemas/ResourceMetaSchema.json#/definitions/resource",
      "json": {
        "description": "Test Resource Description",
        "properties": {
          "apiVersion": { "enum": [ "2015-12-02" ] },
          "type": { "enum": [ "Microsoft.Dan/TestResourceType" ] },
          "resources": { }
        }
      }
    },

    {
      "name": "resource - Empty resource properties",
      "definition": "./schemas/ResourceMetaSchema.json#/definitions/resource",
      "json": {
        "description": "Test Resource Description",
        "properties": {
          "apiVersion": { "enum": [ "2015-12-02" ] },
          "type": { "enum": [ "Microsoft.Dan/TestResourceType" ] },
          "properties": { }
        }
      }
    },

    {
      "name": "resource - Resource properties with string-valued property",
      "definition": "./schemas/ResourceMetaSchema.json#/definitions/resource",
      "expectedErrors": [
        {
          "message": "Data does not match any schemas from \"oneOf\"",
          "dataPath": "/properties/properties"
        }
      ],
      "json": {
        "description": "Test Resource Description",
        "properties": {
          "apiVersion": { "enum": [ "2015-12-02" ] },
          "type": { "enum": [ "Microsoft.Dan/TestResourceType" ] },
          "properties": {
            "testPropertyName": "TestName"
          }
        }
      }
    },

    {
      "name": "resource - Resource properties with empty object-valued property",
      "definition": "./schemas/ResourceMetaSchema.json#/definitions/resource",
      "expectedErrors": [
        {
          "message": "Data does not match any schemas from \"oneOf\"",
          "dataPath": "/properties/properties"
        }
      ],
      "json": {
        "description": "Test Resource Description",
        "properties": {
          "apiVersion": { "enum": [ "2015-12-02" ] },
          "type": { "enum": [ "Microsoft.Dan/TestResourceType" ] },
          "properties": {
            "testPropertyName": { }
          }
        }
      }
    },


    


    {
      "name": "resourceSpecificProperties - Declared type is object with no properties",
      "definition": "./schemas/ResourceMetaSchema.json#/definitions/resourceSpecificProperties",
      "json": {
        "type": "object"
      }
    },

    {
      "name": "resourceSpecificProperties - Unrecognized property",
      "definition": "./schemas/ResourceMetaSchema.json#/definitions/resourceSpecificProperties",
      "expectedErrors": [
        {
          "message": "Data does not match any schemas from \"oneOf\"",
          "dataPath": "/"
        }
      ],
      "json": {
        "testPropertyName": 50
      }
    },

    {
      "name": "resourceSpecificProperties - Integer value properties",
      "definition": "./schemas/ResourceMetaSchema.json#/definitions/resourceSpecificProperties",
      "expectedErrors": [
        {
          "message": "Data does not match any schemas from \"oneOf\"",
          "dataPath": "/"
        }
      ],
      "json": {
        "type": "object",
        "properties": 39
      }
    },

    {
      "name": "resourceSpecificProperties - Empty properties object",
      "definition": "./schemas/ResourceMetaSchema.json#/definitions/resourceSpecificProperties",
      "json": {
        "type": "object",
        "properties": { }
      }
    },

    {
      "name": "resourceSpecificProperties - One valid property",
      "definition": "./schemas/ResourceMetaSchema.json#/definitions/resourceSpecificProperties",
      "json": {
        "type": "object",
        "properties": {
          "testResourceProperty": {
            "description": "Description1"
          }
        }
      }
    },

    {
      "name": "resourceSpecificProperties - Multiple valid properties",
      "definition": "./schemas/ResourceMetaSchema.json#/definitions/resourceSpecificProperties",
      "json": {
        "type": "object",
        "properties": {
          "testResourceProperty1": {
            "description": "Description1"
          },
          "testResourceProperty2": {
            "description": "Description2"
          }
        }
      }
    },

    {
      "name": "resourceProperty - Non-object",
      "definition": "./schemas/ResourceMetaSchema.json#/definitions/resourceProperty",
      "expectedErrors": [
        {
          "message": "Invalid type: string (expected object)",
          "dataPath": "/"
        }
      ],
      "json": "non-object value"
    },

    {
      "name": "resourceProperty - Without description",
      "definition": "./schemas/ResourceMetaSchema.json#/definitions/resourceProperty",
      "expectedErrors": [
        {
          "message": "Missing required property: description",
          "dataPath": "/"
        }
      ],
      "json": {
        "oneOf": [
          { "type": "integer" },
          { "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression" }
        ]
      }
    },

    {
      "name": "resourceProperty - String type",
      "definition": "./schemas/ResourceMetaSchema.json#/definitions/resourceProperty",
      "json": {
        "type": "string",
        "description": "Test description that describes this property."
      }
    },

    {
      "name": "resourceProperty - Number type without expression option",
      "definition": "./schemas/ResourceMetaSchema.json#/definitions/resourceProperty",
      "expectedErrors": [
        {
          "message": "No enum match for: \"number\"",
          "dataPath": "/type"
        }
      ],
      "json": {
        "type": "number",
        "description": "Test description that describes this property."
      }
    },


    {
      "name": "resourcePropertyDefinitionOptions - Non-array type",
      "definition": "./schemas/ResourceMetaSchema.json#/definitions/resourcePropertyDefinitionOptions",
      "expectedErrors": [
        {
          "message": "Invalid type: number (expected array)",
          "dataPath": "/"
        }
      ],
      "json": 7
    },

    {
      "name": "resourcePropertyDefinitionOptions - Empty array",
      "definition": "./schemas/ResourceMetaSchema.json#/definitions/resourcePropertyDefinitionOptions",
      "expectedErrors": [
        {
          "message": "Array is too short (0), minimum 2",
          "dataPath": "/"
        }
      ],
      "json": [ ]
    },

    {
      "name": "resourcePropertyDefinitionOptions - Array with two string values",
      "definition": "./schemas/ResourceMetaSchema.json#/definitions/resourcePropertyDefinitionOptions",
      "expectedErrors": [
        {
          "message": "Invalid type: string (expected object)",
          "dataPath": "/0"
        },
        {
          "message": "Invalid type: string (expected object)",
          "dataPath": "/1"
        }
      ],
      "json": [
        "hello",
        "there"
      ]
    },

    {
      "name": "resourcePropertyDefinitionOptions - Expression reference and boolean type",
      "definition": "./schemas/ResourceMetaSchema.json#/definitions/resourcePropertyDefinitionOptions",
      "json": [
        { "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression" },
        { "type": "boolean" }
      ]
    },

    {
      "name": "resourcePropertyDefinitionOptions - Two expression references",
      "definition": "./schemas/ResourceMetaSchema.json#/definitions/resourcePropertyDefinitionOptions",
      "expectedErrors": [
        {
          "message": "Array items are not unique (indices 0 and 1)",
          "dataPath": "/"
        }
      ],
      "json": [
        { "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression" },
        { "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression" }
      ]
    },

    {
      "name": "resourcePropertyDefinitionOptions - Expression reference and string type",
      "definition": "./schemas/ResourceMetaSchema.json#/definitions/resourcePropertyDefinitionOptions",
      "expectedErrors": [
        {
          "message": "Data does not match any schemas from \"oneOf\"",
          "dataPath": "/1"
        }
      ],
      "json": [
        { "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression" },
        { "type": "string" }
      ]
    },

    {
      "name": "resourcePropertyDefinitionOptions - Expression reference and string type with pattern",
      "definition": "./schemas/ResourceMetaSchema.json#/definitions/resourcePropertyDefinitionOptions",
      "json": [
        { "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression" },
        {
          "type": "string",
          "pattern": "Regular Expression Pattern"
        }
      ]
    },

    {
      "name": "resourcePropertyDefinitionOptions - Expression reference and number type",
      "definition": "./schemas/ResourceMetaSchema.json#/definitions/resourcePropertyDefinitionOptions",
      "expectedErrors": [
        {
          "message": "Data does not match any schemas from \"oneOf\"",
          "dataPath": "/1"
        }
      ],
      "json": [
        { "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression" },
        { "type": "number" }
      ]
    },
    
    {
      "name": "resourcePropertyDefinitionOptions - Expression reference and empty enum",
      "definition": "./schemas/ResourceMetaSchema.json#/definitions/resourcePropertyDefinitionOptions",
      "expectedErrors": [
        {
          "message": "Data does not match any schemas from \"oneOf\"",
          "dataPath": "/1"
        }
      ],
      "json": [
        { "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression" },
        { "enum": [] }
      ]
    },
    
    {
      "name": "resourcePropertyDefinitionOptions - Expression reference and enum with one value",
      "definition": "./schemas/ResourceMetaSchema.json#/definitions/resourcePropertyDefinitionOptions",
      "json": [
        { "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression" },
        { "enum": [ 10 ] }
      ]
    },
    
    {
      "name": "resourcePropertyDefinitionOptions - Expression reference and enum with one value and default value",
      "definition": "./schemas/ResourceMetaSchema.json#/definitions/resourcePropertyDefinitionOptions",
      "json": [
        { "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression" },
        {
          "enum": [ 10 ],
          "default": 20
        }
      ]
    },
    
    {
      "name": "resourcePropertyDefinitionOptions - Expression reference and $ref to local definition",
      "definition": "./schemas/ResourceMetaSchema.json#/definitions/resourcePropertyDefinitionOptions",
      "json": [
        { "$ref": "#/definitions/UTC" },
        { "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression" }
      ]
    },
    
    {
      "name": "resourcePropertyDefinitionOptions - Expression reference and oneOf array",
      "definition": "./schemas/ResourceMetaSchema.json#/definitions/resourcePropertyDefinitionOptions",
      "json": [
        {
          "oneOf": [
            {
              "enum": [ 10 ]
            },
            {
              "enum": [ "10" ]
            }
          ]
        },
        { "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression" }
      ]
    }
    
  ]
}
